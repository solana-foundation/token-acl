//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum TokenAclError {
    /// 0 - An invalid authority was provided
    #[error("An invalid authority was provided")]
    InvalidAuthority = 0x0,
    /// 1 - An invalid system program was provided
    #[error("An invalid system program was provided")]
    InvalidSystemProgram = 0x1,
    /// 2 - An invalid token program was provided
    #[error("An invalid token program was provided")]
    InvalidTokenProgram = 0x2,
    /// 3 - An invalid token mint was provided
    #[error("An invalid token mint was provided")]
    InvalidTokenMint = 0x3,
    /// 4 - An invalid mint config was provided
    #[error("An invalid mint config was provided")]
    InvalidMintConfig = 0x4,
    /// 5 - An invalid gating program was provided
    #[error("An invalid gating program was provided")]
    InvalidGatingProgram = 0x5,
    /// 6 - Permissionless thaw is not enabled
    #[error("Permissionless thaw is not enabled")]
    PermissionlessThawNotEnabled = 0x6,
    /// 7 - Permissionless freeze is not enabled
    #[error("Permissionless freeze is not enabled")]
    PermissionlessFreezeNotEnabled = 0x7,
    /// 8 - An invalid token account owner was provided
    #[error("An invalid token account owner was provided")]
    InvalidTokenAccountOwner = 0x8,
}

impl From<TokenAclError> for solana_program_error::ProgramError {
    fn from(e: TokenAclError) -> Self {
        solana_program_error::ProgramError::Custom(e as u32)
    }
}
