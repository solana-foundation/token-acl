/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getBooleanDecoder,
  getBooleanEncoder,
  getStructDecoder,
  getStructEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/kit';
import { findFlagAccountPda, FlagAccountSeeds } from '../pdas';

export type FlagAccount = { isThawing: boolean };

export type FlagAccountArgs = FlagAccount;

export function getFlagAccountEncoder(): FixedSizeEncoder<FlagAccountArgs> {
  return getStructEncoder([['isThawing', getBooleanEncoder()]]);
}

export function getFlagAccountDecoder(): FixedSizeDecoder<FlagAccount> {
  return getStructDecoder([['isThawing', getBooleanDecoder()]]);
}

export function getFlagAccountCodec(): FixedSizeCodec<
  FlagAccountArgs,
  FlagAccount
> {
  return combineCodec(getFlagAccountEncoder(), getFlagAccountDecoder());
}

export function decodeFlagAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<FlagAccount, TAddress>;
export function decodeFlagAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<FlagAccount, TAddress>;
export function decodeFlagAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<FlagAccount, TAddress> | MaybeAccount<FlagAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getFlagAccountDecoder()
  );
}

export async function fetchFlagAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<FlagAccount, TAddress>> {
  const maybeAccount = await fetchMaybeFlagAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeFlagAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<FlagAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeFlagAccount(maybeAccount);
}

export async function fetchAllFlagAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<FlagAccount>[]> {
  const maybeAccounts = await fetchAllMaybeFlagAccount(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeFlagAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<FlagAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeFlagAccount(maybeAccount));
}

export function getFlagAccountSize(): number {
  return 1;
}

export async function fetchFlagAccountFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: FlagAccountSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<Account<FlagAccount>> {
  const maybeAccount = await fetchMaybeFlagAccountFromSeeds(rpc, seeds, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeFlagAccountFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: FlagAccountSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MaybeAccount<FlagAccount>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findFlagAccountPda(seeds, { programAddress });
  return await fetchMaybeFlagAccount(rpc, address, fetchConfig);
}
