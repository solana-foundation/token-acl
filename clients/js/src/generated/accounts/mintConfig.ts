/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/kit';
import { MintConfigSeeds, findMintConfigPda } from '../pdas';

export const MINT_CONFIG_DISCRIMINATOR = 1;

export function getMintConfigDiscriminatorBytes() {
  return getU8Encoder().encode(MINT_CONFIG_DISCRIMINATOR);
}

export type MintConfig = {
  discriminator: number;
  mint: Address;
  freezeAuthority: Address;
  gatingProgram: Address;
  bump: number;
  enablePermissionlessThaw: boolean;
  enablePermissionlessFreeze: boolean;
};

export type MintConfigArgs = {
  mint: Address;
  freezeAuthority: Address;
  gatingProgram: Address;
  bump: number;
  enablePermissionlessThaw: boolean;
  enablePermissionlessFreeze: boolean;
};

export function getMintConfigEncoder(): Encoder<MintConfigArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['mint', getAddressEncoder()],
      ['freezeAuthority', getAddressEncoder()],
      ['gatingProgram', getAddressEncoder()],
      ['bump', getU8Encoder()],
      ['enablePermissionlessThaw', getBooleanEncoder()],
      ['enablePermissionlessFreeze', getBooleanEncoder()],
    ]),
    (value) => ({ ...value, discriminator: MINT_CONFIG_DISCRIMINATOR })
  );
}

export function getMintConfigDecoder(): Decoder<MintConfig> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['mint', getAddressDecoder()],
    ['freezeAuthority', getAddressDecoder()],
    ['gatingProgram', getAddressDecoder()],
    ['bump', getU8Decoder()],
    ['enablePermissionlessThaw', getBooleanDecoder()],
    ['enablePermissionlessFreeze', getBooleanDecoder()],
  ]);
}

export function getMintConfigCodec(): Codec<MintConfigArgs, MintConfig> {
  return combineCodec(getMintConfigEncoder(), getMintConfigDecoder());
}

export function decodeMintConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<MintConfig, TAddress>;
export function decodeMintConfig<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<MintConfig, TAddress>;
export function decodeMintConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<MintConfig, TAddress> | MaybeAccount<MintConfig, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getMintConfigDecoder()
  );
}

export async function fetchMintConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<MintConfig, TAddress>> {
  const maybeAccount = await fetchMaybeMintConfig(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeMintConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<MintConfig, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeMintConfig(maybeAccount);
}

export async function fetchAllMintConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<MintConfig>[]> {
  const maybeAccounts = await fetchAllMaybeMintConfig(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeMintConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<MintConfig>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeMintConfig(maybeAccount));
}

export function getMintConfigSize(): number {
  return 0;
}

export async function fetchMintConfigFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: MintConfigSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<Account<MintConfig>> {
  const maybeAccount = await fetchMaybeMintConfigFromSeeds(rpc, seeds, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeMintConfigFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: MintConfigSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MaybeAccount<MintConfig>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findMintConfigPda(seeds, { programAddress });
  return await fetchMaybeMintConfig(rpc, address, fetchConfig);
}
