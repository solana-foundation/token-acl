/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { EBALTS_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const DELETE_CONFIG_DISCRIMINATOR = 3;

export function getDeleteConfigDiscriminatorBytes() {
  return getU8Encoder().encode(DELETE_CONFIG_DISCRIMINATOR);
}

export type DeleteConfigInstruction<
  TProgram extends string = typeof EBALTS_PROGRAM_ADDRESS,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountReceiver extends string | IAccountMeta<string> = string,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountMintConfig extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountReceiver extends string
        ? WritableAccount<TAccountReceiver>
        : TAccountReceiver,
      TAccountMint extends string
        ? WritableAccount<TAccountMint>
        : TAccountMint,
      TAccountMintConfig extends string
        ? WritableAccount<TAccountMintConfig>
        : TAccountMintConfig,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type DeleteConfigInstructionData = {
  discriminator: number;
  newFreezeAuthority: Address;
};

export type DeleteConfigInstructionDataArgs = { newFreezeAuthority: Address };

export function getDeleteConfigInstructionDataEncoder(): Encoder<DeleteConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['newFreezeAuthority', getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: DELETE_CONFIG_DISCRIMINATOR })
  );
}

export function getDeleteConfigInstructionDataDecoder(): Decoder<DeleteConfigInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['newFreezeAuthority', getAddressDecoder()],
  ]);
}

export function getDeleteConfigInstructionDataCodec(): Codec<
  DeleteConfigInstructionDataArgs,
  DeleteConfigInstructionData
> {
  return combineCodec(
    getDeleteConfigInstructionDataEncoder(),
    getDeleteConfigInstructionDataDecoder()
  );
}

export type DeleteConfigInput<
  TAccountAuthority extends string = string,
  TAccountReceiver extends string = string,
  TAccountMint extends string = string,
  TAccountMintConfig extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  receiver: Address<TAccountReceiver>;
  mint: Address<TAccountMint>;
  mintConfig: Address<TAccountMintConfig>;
  tokenProgram?: Address<TAccountTokenProgram>;
  newFreezeAuthority: DeleteConfigInstructionDataArgs['newFreezeAuthority'];
};

export function getDeleteConfigInstruction<
  TAccountAuthority extends string,
  TAccountReceiver extends string,
  TAccountMint extends string,
  TAccountMintConfig extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof EBALTS_PROGRAM_ADDRESS,
>(
  input: DeleteConfigInput<
    TAccountAuthority,
    TAccountReceiver,
    TAccountMint,
    TAccountMintConfig,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): DeleteConfigInstruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountReceiver,
  TAccountMint,
  TAccountMintConfig,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? EBALTS_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: false },
    receiver: { value: input.receiver ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: true },
    mintConfig: { value: input.mintConfig ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.receiver),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.mintConfig),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getDeleteConfigInstructionDataEncoder().encode(
      args as DeleteConfigInstructionDataArgs
    ),
  } as DeleteConfigInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountReceiver,
    TAccountMint,
    TAccountMintConfig,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedDeleteConfigInstruction<
  TProgram extends string = typeof EBALTS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    authority: TAccountMetas[0];
    receiver: TAccountMetas[1];
    mint: TAccountMetas[2];
    mintConfig: TAccountMetas[3];
    tokenProgram: TAccountMetas[4];
  };
  data: DeleteConfigInstructionData;
};

export function parseDeleteConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedDeleteConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      receiver: getNextAccount(),
      mint: getNextAccount(),
      mintConfig: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getDeleteConfigInstructionDataDecoder().decode(instruction.data),
  };
}
