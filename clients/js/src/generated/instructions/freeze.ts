/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { findMintConfigPda } from '../pdas';
import { TOKEN_ACL_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const FREEZE_DISCRIMINATOR = 5;

export function getFreezeDiscriminatorBytes() {
  return getU8Encoder().encode(FREEZE_DISCRIMINATOR);
}

export type FreezeInstruction<
  TProgram extends string = typeof TOKEN_ACL_PROGRAM_ADDRESS,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountMint extends string | AccountMeta<string> = string,
  TAccountTokenAccount extends string | AccountMeta<string> = string,
  TAccountMintConfig extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountTokenAccount extends string
        ? WritableAccount<TAccountTokenAccount>
        : TAccountTokenAccount,
      TAccountMintConfig extends string
        ? ReadonlyAccount<TAccountMintConfig>
        : TAccountMintConfig,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type FreezeInstructionData = { discriminator: number };

export type FreezeInstructionDataArgs = {};

export function getFreezeInstructionDataEncoder(): FixedSizeEncoder<FreezeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: FREEZE_DISCRIMINATOR })
  );
}

export function getFreezeInstructionDataDecoder(): FixedSizeDecoder<FreezeInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getFreezeInstructionDataCodec(): FixedSizeCodec<
  FreezeInstructionDataArgs,
  FreezeInstructionData
> {
  return combineCodec(
    getFreezeInstructionDataEncoder(),
    getFreezeInstructionDataDecoder()
  );
}

export type FreezeAsyncInput<
  TAccountAuthority extends string = string,
  TAccountMint extends string = string,
  TAccountTokenAccount extends string = string,
  TAccountMintConfig extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  mint: Address<TAccountMint>;
  tokenAccount: Address<TAccountTokenAccount>;
  mintConfig?: Address<TAccountMintConfig>;
  tokenProgram?: Address<TAccountTokenProgram>;
};

export async function getFreezeInstructionAsync<
  TAccountAuthority extends string,
  TAccountMint extends string,
  TAccountTokenAccount extends string,
  TAccountMintConfig extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof TOKEN_ACL_PROGRAM_ADDRESS,
>(
  input: FreezeAsyncInput<
    TAccountAuthority,
    TAccountMint,
    TAccountTokenAccount,
    TAccountMintConfig,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  FreezeInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountMint,
    TAccountTokenAccount,
    TAccountMintConfig,
    TAccountTokenProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? TOKEN_ACL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: false },
    tokenAccount: { value: input.tokenAccount ?? null, isWritable: true },
    mintConfig: { value: input.mintConfig ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.mintConfig.value) {
    accounts.mintConfig.value = await findMintConfigPda({
      mint: expectAddress(accounts.mint.value),
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.tokenAccount),
      getAccountMeta(accounts.mintConfig),
      getAccountMeta(accounts.tokenProgram),
    ],
    data: getFreezeInstructionDataEncoder().encode({}),
    programAddress,
  } as FreezeInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountMint,
    TAccountTokenAccount,
    TAccountMintConfig,
    TAccountTokenProgram
  >);
}

export type FreezeInput<
  TAccountAuthority extends string = string,
  TAccountMint extends string = string,
  TAccountTokenAccount extends string = string,
  TAccountMintConfig extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  mint: Address<TAccountMint>;
  tokenAccount: Address<TAccountTokenAccount>;
  mintConfig: Address<TAccountMintConfig>;
  tokenProgram?: Address<TAccountTokenProgram>;
};

export function getFreezeInstruction<
  TAccountAuthority extends string,
  TAccountMint extends string,
  TAccountTokenAccount extends string,
  TAccountMintConfig extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof TOKEN_ACL_PROGRAM_ADDRESS,
>(
  input: FreezeInput<
    TAccountAuthority,
    TAccountMint,
    TAccountTokenAccount,
    TAccountMintConfig,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): FreezeInstruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountMint,
  TAccountTokenAccount,
  TAccountMintConfig,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? TOKEN_ACL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: false },
    tokenAccount: { value: input.tokenAccount ?? null, isWritable: true },
    mintConfig: { value: input.mintConfig ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.tokenAccount),
      getAccountMeta(accounts.mintConfig),
      getAccountMeta(accounts.tokenProgram),
    ],
    data: getFreezeInstructionDataEncoder().encode({}),
    programAddress,
  } as FreezeInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountMint,
    TAccountTokenAccount,
    TAccountMintConfig,
    TAccountTokenProgram
  >);
}

export type ParsedFreezeInstruction<
  TProgram extends string = typeof TOKEN_ACL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    authority: TAccountMetas[0];
    mint: TAccountMetas[1];
    tokenAccount: TAccountMetas[2];
    mintConfig: TAccountMetas[3];
    tokenProgram: TAccountMetas[4];
  };
  data: FreezeInstructionData;
};

export function parseFreezeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedFreezeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      mint: getNextAccount(),
      tokenAccount: getNextAccount(),
      mintConfig: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getFreezeInstructionDataDecoder().decode(instruction.data),
  };
}
