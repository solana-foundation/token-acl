/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getBooleanDecoder,
  getBooleanEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { TOKEN_ACL_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const TOGGLE_PERMISSIONLESS_INSTRUCTIONS_DISCRIMINATOR = 8;

export function getTogglePermissionlessInstructionsDiscriminatorBytes() {
  return getU8Encoder().encode(
    TOGGLE_PERMISSIONLESS_INSTRUCTIONS_DISCRIMINATOR
  );
}

export type TogglePermissionlessInstructionsInstruction<
  TProgram extends string = typeof TOKEN_ACL_PROGRAM_ADDRESS,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountMintConfig extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountMintConfig extends string
        ? WritableAccount<TAccountMintConfig>
        : TAccountMintConfig,
      ...TRemainingAccounts,
    ]
  >;

export type TogglePermissionlessInstructionsInstructionData = {
  discriminator: number;
  freezeEnabled: boolean;
  thawEnabled: boolean;
};

export type TogglePermissionlessInstructionsInstructionDataArgs = {
  freezeEnabled: boolean;
  thawEnabled: boolean;
};

export function getTogglePermissionlessInstructionsInstructionDataEncoder(): FixedSizeEncoder<TogglePermissionlessInstructionsInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['freezeEnabled', getBooleanEncoder()],
      ['thawEnabled', getBooleanEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: TOGGLE_PERMISSIONLESS_INSTRUCTIONS_DISCRIMINATOR,
    })
  );
}

export function getTogglePermissionlessInstructionsInstructionDataDecoder(): FixedSizeDecoder<TogglePermissionlessInstructionsInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['freezeEnabled', getBooleanDecoder()],
    ['thawEnabled', getBooleanDecoder()],
  ]);
}

export function getTogglePermissionlessInstructionsInstructionDataCodec(): FixedSizeCodec<
  TogglePermissionlessInstructionsInstructionDataArgs,
  TogglePermissionlessInstructionsInstructionData
> {
  return combineCodec(
    getTogglePermissionlessInstructionsInstructionDataEncoder(),
    getTogglePermissionlessInstructionsInstructionDataDecoder()
  );
}

export type TogglePermissionlessInstructionsInput<
  TAccountAuthority extends string = string,
  TAccountMintConfig extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  mintConfig: Address<TAccountMintConfig>;
  freezeEnabled: TogglePermissionlessInstructionsInstructionDataArgs['freezeEnabled'];
  thawEnabled: TogglePermissionlessInstructionsInstructionDataArgs['thawEnabled'];
};

export function getTogglePermissionlessInstructionsInstruction<
  TAccountAuthority extends string,
  TAccountMintConfig extends string,
  TProgramAddress extends Address = typeof TOKEN_ACL_PROGRAM_ADDRESS,
>(
  input: TogglePermissionlessInstructionsInput<
    TAccountAuthority,
    TAccountMintConfig
  >,
  config?: { programAddress?: TProgramAddress }
): TogglePermissionlessInstructionsInstruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountMintConfig
> {
  // Program address.
  const programAddress = config?.programAddress ?? TOKEN_ACL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: false },
    mintConfig: { value: input.mintConfig ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.mintConfig),
    ],
    data: getTogglePermissionlessInstructionsInstructionDataEncoder().encode(
      args as TogglePermissionlessInstructionsInstructionDataArgs
    ),
    programAddress,
  } as TogglePermissionlessInstructionsInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountMintConfig
  >);
}

export type ParsedTogglePermissionlessInstructionsInstruction<
  TProgram extends string = typeof TOKEN_ACL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    authority: TAccountMetas[0];
    mintConfig: TAccountMetas[1];
  };
  data: TogglePermissionlessInstructionsInstructionData;
};

export function parseTogglePermissionlessInstructionsInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedTogglePermissionlessInstructionsInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: { authority: getNextAccount(), mintConfig: getNextAccount() },
    data: getTogglePermissionlessInstructionsInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
