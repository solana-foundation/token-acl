/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { findFlagAccountPda, findMintConfigPda } from '../pdas';
import { TOKEN_ACL_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const FREEZE_PERMISSIONLESS_DISCRIMINATOR = 7;

export function getFreezePermissionlessDiscriminatorBytes() {
  return getU8Encoder().encode(FREEZE_PERMISSIONLESS_DISCRIMINATOR);
}

export type FreezePermissionlessInstruction<
  TProgram extends string = typeof TOKEN_ACL_PROGRAM_ADDRESS,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountMint extends string | AccountMeta<string> = string,
  TAccountTokenAccount extends string | AccountMeta<string> = string,
  TAccountFlagAccount extends string | AccountMeta<string> = string,
  TAccountTokenAccountOwner extends string | AccountMeta<string> = string,
  TAccountMintConfig extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountGatingProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountTokenAccount extends string
        ? WritableAccount<TAccountTokenAccount>
        : TAccountTokenAccount,
      TAccountFlagAccount extends string
        ? WritableAccount<TAccountFlagAccount>
        : TAccountFlagAccount,
      TAccountTokenAccountOwner extends string
        ? ReadonlyAccount<TAccountTokenAccountOwner>
        : TAccountTokenAccountOwner,
      TAccountMintConfig extends string
        ? ReadonlyAccount<TAccountMintConfig>
        : TAccountMintConfig,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountGatingProgram extends string
        ? ReadonlyAccount<TAccountGatingProgram>
        : TAccountGatingProgram,
      ...TRemainingAccounts,
    ]
  >;

export type FreezePermissionlessInstructionData = { discriminator: number };

export type FreezePermissionlessInstructionDataArgs = {};

export function getFreezePermissionlessInstructionDataEncoder(): FixedSizeEncoder<FreezePermissionlessInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({
      ...value,
      discriminator: FREEZE_PERMISSIONLESS_DISCRIMINATOR,
    })
  );
}

export function getFreezePermissionlessInstructionDataDecoder(): FixedSizeDecoder<FreezePermissionlessInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getFreezePermissionlessInstructionDataCodec(): FixedSizeCodec<
  FreezePermissionlessInstructionDataArgs,
  FreezePermissionlessInstructionData
> {
  return combineCodec(
    getFreezePermissionlessInstructionDataEncoder(),
    getFreezePermissionlessInstructionDataDecoder()
  );
}

export type FreezePermissionlessAsyncInput<
  TAccountAuthority extends string = string,
  TAccountMint extends string = string,
  TAccountTokenAccount extends string = string,
  TAccountFlagAccount extends string = string,
  TAccountTokenAccountOwner extends string = string,
  TAccountMintConfig extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountGatingProgram extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  mint: Address<TAccountMint>;
  tokenAccount: Address<TAccountTokenAccount>;
  flagAccount?: Address<TAccountFlagAccount>;
  tokenAccountOwner: Address<TAccountTokenAccountOwner>;
  mintConfig?: Address<TAccountMintConfig>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  gatingProgram: Address<TAccountGatingProgram>;
};

export async function getFreezePermissionlessInstructionAsync<
  TAccountAuthority extends string,
  TAccountMint extends string,
  TAccountTokenAccount extends string,
  TAccountFlagAccount extends string,
  TAccountTokenAccountOwner extends string,
  TAccountMintConfig extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountGatingProgram extends string,
  TProgramAddress extends Address = typeof TOKEN_ACL_PROGRAM_ADDRESS,
>(
  input: FreezePermissionlessAsyncInput<
    TAccountAuthority,
    TAccountMint,
    TAccountTokenAccount,
    TAccountFlagAccount,
    TAccountTokenAccountOwner,
    TAccountMintConfig,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountGatingProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  FreezePermissionlessInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountMint,
    TAccountTokenAccount,
    TAccountFlagAccount,
    TAccountTokenAccountOwner,
    TAccountMintConfig,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountGatingProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? TOKEN_ACL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: false },
    tokenAccount: { value: input.tokenAccount ?? null, isWritable: true },
    flagAccount: { value: input.flagAccount ?? null, isWritable: true },
    tokenAccountOwner: {
      value: input.tokenAccountOwner ?? null,
      isWritable: false,
    },
    mintConfig: { value: input.mintConfig ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    gatingProgram: { value: input.gatingProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.flagAccount.value) {
    accounts.flagAccount.value = await findFlagAccountPda({
      tokenAccount: expectAddress(accounts.tokenAccount.value),
    });
  }
  if (!accounts.mintConfig.value) {
    accounts.mintConfig.value = await findMintConfigPda({
      mint: expectAddress(accounts.mint.value),
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.tokenAccount),
      getAccountMeta(accounts.flagAccount),
      getAccountMeta(accounts.tokenAccountOwner),
      getAccountMeta(accounts.mintConfig),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.gatingProgram),
    ],
    data: getFreezePermissionlessInstructionDataEncoder().encode({}),
    programAddress,
  } as FreezePermissionlessInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountMint,
    TAccountTokenAccount,
    TAccountFlagAccount,
    TAccountTokenAccountOwner,
    TAccountMintConfig,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountGatingProgram
  >);
}

export type FreezePermissionlessInput<
  TAccountAuthority extends string = string,
  TAccountMint extends string = string,
  TAccountTokenAccount extends string = string,
  TAccountFlagAccount extends string = string,
  TAccountTokenAccountOwner extends string = string,
  TAccountMintConfig extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountGatingProgram extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  mint: Address<TAccountMint>;
  tokenAccount: Address<TAccountTokenAccount>;
  flagAccount: Address<TAccountFlagAccount>;
  tokenAccountOwner: Address<TAccountTokenAccountOwner>;
  mintConfig: Address<TAccountMintConfig>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  gatingProgram: Address<TAccountGatingProgram>;
};

export function getFreezePermissionlessInstruction<
  TAccountAuthority extends string,
  TAccountMint extends string,
  TAccountTokenAccount extends string,
  TAccountFlagAccount extends string,
  TAccountTokenAccountOwner extends string,
  TAccountMintConfig extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountGatingProgram extends string,
  TProgramAddress extends Address = typeof TOKEN_ACL_PROGRAM_ADDRESS,
>(
  input: FreezePermissionlessInput<
    TAccountAuthority,
    TAccountMint,
    TAccountTokenAccount,
    TAccountFlagAccount,
    TAccountTokenAccountOwner,
    TAccountMintConfig,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountGatingProgram
  >,
  config?: { programAddress?: TProgramAddress }
): FreezePermissionlessInstruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountMint,
  TAccountTokenAccount,
  TAccountFlagAccount,
  TAccountTokenAccountOwner,
  TAccountMintConfig,
  TAccountTokenProgram,
  TAccountSystemProgram,
  TAccountGatingProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? TOKEN_ACL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: false },
    tokenAccount: { value: input.tokenAccount ?? null, isWritable: true },
    flagAccount: { value: input.flagAccount ?? null, isWritable: true },
    tokenAccountOwner: {
      value: input.tokenAccountOwner ?? null,
      isWritable: false,
    },
    mintConfig: { value: input.mintConfig ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    gatingProgram: { value: input.gatingProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb' as Address<'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.tokenAccount),
      getAccountMeta(accounts.flagAccount),
      getAccountMeta(accounts.tokenAccountOwner),
      getAccountMeta(accounts.mintConfig),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.gatingProgram),
    ],
    data: getFreezePermissionlessInstructionDataEncoder().encode({}),
    programAddress,
  } as FreezePermissionlessInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountMint,
    TAccountTokenAccount,
    TAccountFlagAccount,
    TAccountTokenAccountOwner,
    TAccountMintConfig,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountGatingProgram
  >);
}

export type ParsedFreezePermissionlessInstruction<
  TProgram extends string = typeof TOKEN_ACL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    authority: TAccountMetas[0];
    mint: TAccountMetas[1];
    tokenAccount: TAccountMetas[2];
    flagAccount: TAccountMetas[3];
    tokenAccountOwner: TAccountMetas[4];
    mintConfig: TAccountMetas[5];
    tokenProgram: TAccountMetas[6];
    systemProgram: TAccountMetas[7];
    gatingProgram: TAccountMetas[8];
  };
  data: FreezePermissionlessInstructionData;
};

export function parseFreezePermissionlessInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedFreezePermissionlessInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      mint: getNextAccount(),
      tokenAccount: getNextAccount(),
      flagAccount: getNextAccount(),
      tokenAccountOwner: getNextAccount(),
      mintConfig: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      gatingProgram: getNextAccount(),
    },
    data: getFreezePermissionlessInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
