/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { TOKEN_ACL_PROGRAM_ADDRESS } from '../programs';

/** InvalidAuthority: An invalid authority was provided */
export const TOKEN_ACL_ERROR__INVALID_AUTHORITY = 0x0; // 0
/** InvalidSystemProgram: An invalid system program was provided */
export const TOKEN_ACL_ERROR__INVALID_SYSTEM_PROGRAM = 0x1; // 1
/** InvalidTokenProgram: An invalid token program was provided */
export const TOKEN_ACL_ERROR__INVALID_TOKEN_PROGRAM = 0x2; // 2
/** InvalidTokenMint: An invalid token mint was provided */
export const TOKEN_ACL_ERROR__INVALID_TOKEN_MINT = 0x3; // 3
/** InvalidMintConfig: An invalid mint config was provided */
export const TOKEN_ACL_ERROR__INVALID_MINT_CONFIG = 0x4; // 4
/** InvalidGatingProgram: An invalid gating program was provided */
export const TOKEN_ACL_ERROR__INVALID_GATING_PROGRAM = 0x5; // 5
/** PermissionlessThawNotEnabled: Permissionless thaw is not enabled */
export const TOKEN_ACL_ERROR__PERMISSIONLESS_THAW_NOT_ENABLED = 0x6; // 6
/** PermissionlessFreezeNotEnabled: Permissionless freeze is not enabled */
export const TOKEN_ACL_ERROR__PERMISSIONLESS_FREEZE_NOT_ENABLED = 0x7; // 7
/** InvalidTokenAccountOwner: An invalid token account owner was provided */
export const TOKEN_ACL_ERROR__INVALID_TOKEN_ACCOUNT_OWNER = 0x8; // 8

export type TokenAclError =
  | typeof TOKEN_ACL_ERROR__INVALID_AUTHORITY
  | typeof TOKEN_ACL_ERROR__INVALID_GATING_PROGRAM
  | typeof TOKEN_ACL_ERROR__INVALID_MINT_CONFIG
  | typeof TOKEN_ACL_ERROR__INVALID_SYSTEM_PROGRAM
  | typeof TOKEN_ACL_ERROR__INVALID_TOKEN_ACCOUNT_OWNER
  | typeof TOKEN_ACL_ERROR__INVALID_TOKEN_MINT
  | typeof TOKEN_ACL_ERROR__INVALID_TOKEN_PROGRAM
  | typeof TOKEN_ACL_ERROR__PERMISSIONLESS_FREEZE_NOT_ENABLED
  | typeof TOKEN_ACL_ERROR__PERMISSIONLESS_THAW_NOT_ENABLED;

let tokenAclErrorMessages: Record<TokenAclError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  tokenAclErrorMessages = {
    [TOKEN_ACL_ERROR__INVALID_AUTHORITY]: `An invalid authority was provided`,
    [TOKEN_ACL_ERROR__INVALID_GATING_PROGRAM]: `An invalid gating program was provided`,
    [TOKEN_ACL_ERROR__INVALID_MINT_CONFIG]: `An invalid mint config was provided`,
    [TOKEN_ACL_ERROR__INVALID_SYSTEM_PROGRAM]: `An invalid system program was provided`,
    [TOKEN_ACL_ERROR__INVALID_TOKEN_ACCOUNT_OWNER]: `An invalid token account owner was provided`,
    [TOKEN_ACL_ERROR__INVALID_TOKEN_MINT]: `An invalid token mint was provided`,
    [TOKEN_ACL_ERROR__INVALID_TOKEN_PROGRAM]: `An invalid token program was provided`,
    [TOKEN_ACL_ERROR__PERMISSIONLESS_FREEZE_NOT_ENABLED]: `Permissionless freeze is not enabled`,
    [TOKEN_ACL_ERROR__PERMISSIONLESS_THAW_NOT_ENABLED]: `Permissionless thaw is not enabled`,
  };
}

export function getTokenAclErrorMessage(code: TokenAclError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (tokenAclErrorMessages as Record<TokenAclError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isTokenAclError<TProgramErrorCode extends TokenAclError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    TOKEN_ACL_PROGRAM_ADDRESS,
    code
  );
}
