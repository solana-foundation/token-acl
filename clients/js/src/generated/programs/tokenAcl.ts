/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  getU8Encoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedCreateConfigInstruction,
  type ParsedDeleteConfigInstruction,
  type ParsedFreezeInstruction,
  type ParsedFreezePermissionlessIdempotentInstruction,
  type ParsedFreezePermissionlessInstruction,
  type ParsedSetAuthorityInstruction,
  type ParsedSetGatingProgramInstruction,
  type ParsedThawInstruction,
  type ParsedThawPermissionlessIdempotentInstruction,
  type ParsedThawPermissionlessInstruction,
  type ParsedTogglePermissionlessInstructionsInstruction,
} from '../instructions';

export const TOKEN_ACL_PROGRAM_ADDRESS =
  '81H44JYqk1p8RUks7pNJjhQG4Pj8FcaJeTUxZKN3JfLc' as Address<'81H44JYqk1p8RUks7pNJjhQG4Pj8FcaJeTUxZKN3JfLc'>;

export enum TokenAclAccount {
  FlagAccount,
  MintConfig,
}

export function identifyTokenAclAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): TokenAclAccount {
  const data = 'data' in account ? account.data : account;
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return TokenAclAccount.MintConfig;
  }
  throw new Error(
    'The provided account could not be identified as a token-acl account.'
  );
}

export enum TokenAclInstruction {
  CreateConfig,
  SetAuthority,
  SetGatingProgram,
  DeleteConfig,
  Thaw,
  Freeze,
  ThawPermissionless,
  FreezePermissionless,
  ThawPermissionlessIdempotent,
  FreezePermissionlessIdempotent,
  TogglePermissionlessInstructions,
}

export function identifyTokenAclInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): TokenAclInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return TokenAclInstruction.CreateConfig;
  }
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return TokenAclInstruction.SetAuthority;
  }
  if (containsBytes(data, getU8Encoder().encode(2), 0)) {
    return TokenAclInstruction.SetGatingProgram;
  }
  if (containsBytes(data, getU8Encoder().encode(3), 0)) {
    return TokenAclInstruction.DeleteConfig;
  }
  if (containsBytes(data, getU8Encoder().encode(4), 0)) {
    return TokenAclInstruction.Thaw;
  }
  if (containsBytes(data, getU8Encoder().encode(5), 0)) {
    return TokenAclInstruction.Freeze;
  }
  if (containsBytes(data, getU8Encoder().encode(6), 0)) {
    return TokenAclInstruction.ThawPermissionless;
  }
  if (containsBytes(data, getU8Encoder().encode(7), 0)) {
    return TokenAclInstruction.FreezePermissionless;
  }
  if (containsBytes(data, getU8Encoder().encode(9), 0)) {
    return TokenAclInstruction.ThawPermissionlessIdempotent;
  }
  if (containsBytes(data, getU8Encoder().encode(10), 0)) {
    return TokenAclInstruction.FreezePermissionlessIdempotent;
  }
  if (containsBytes(data, getU8Encoder().encode(8), 0)) {
    return TokenAclInstruction.TogglePermissionlessInstructions;
  }
  throw new Error(
    'The provided instruction could not be identified as a token-acl instruction.'
  );
}

export type ParsedTokenAclInstruction<
  TProgram extends string = '81H44JYqk1p8RUks7pNJjhQG4Pj8FcaJeTUxZKN3JfLc',
> =
  | ({
      instructionType: TokenAclInstruction.CreateConfig;
    } & ParsedCreateConfigInstruction<TProgram>)
  | ({
      instructionType: TokenAclInstruction.SetAuthority;
    } & ParsedSetAuthorityInstruction<TProgram>)
  | ({
      instructionType: TokenAclInstruction.SetGatingProgram;
    } & ParsedSetGatingProgramInstruction<TProgram>)
  | ({
      instructionType: TokenAclInstruction.DeleteConfig;
    } & ParsedDeleteConfigInstruction<TProgram>)
  | ({
      instructionType: TokenAclInstruction.Thaw;
    } & ParsedThawInstruction<TProgram>)
  | ({
      instructionType: TokenAclInstruction.Freeze;
    } & ParsedFreezeInstruction<TProgram>)
  | ({
      instructionType: TokenAclInstruction.ThawPermissionless;
    } & ParsedThawPermissionlessInstruction<TProgram>)
  | ({
      instructionType: TokenAclInstruction.FreezePermissionless;
    } & ParsedFreezePermissionlessInstruction<TProgram>)
  | ({
      instructionType: TokenAclInstruction.ThawPermissionlessIdempotent;
    } & ParsedThawPermissionlessIdempotentInstruction<TProgram>)
  | ({
      instructionType: TokenAclInstruction.FreezePermissionlessIdempotent;
    } & ParsedFreezePermissionlessIdempotentInstruction<TProgram>)
  | ({
      instructionType: TokenAclInstruction.TogglePermissionlessInstructions;
    } & ParsedTogglePermissionlessInstructionsInstruction<TProgram>);
