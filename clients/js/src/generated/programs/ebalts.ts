/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  getU8Encoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedCreateConfigInstruction,
  type ParsedForfeitFreezeAuthorityInstruction,
  type ParsedFreezeInstruction,
  type ParsedFreezePermissionlessInstruction,
  type ParsedSetAuthorityInstruction,
  type ParsedSetGatingProgramInstruction,
  type ParsedThawInstruction,
  type ParsedThawPermissionlessInstruction,
  type ParsedTogglePermissionlessInstructionsInstruction,
} from '../instructions';

export const EBALTS_PROGRAM_ADDRESS =
  'Eba1ts11111111111111111111111111111111111111' as Address<'Eba1ts11111111111111111111111111111111111111'>;

export enum EbaltsAccount {
  MintConfig,
}

export function identifyEbaltsAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): EbaltsAccount {
  const data = 'data' in account ? account.data : account;
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return EbaltsAccount.MintConfig;
  }
  throw new Error(
    'The provided account could not be identified as a ebalts account.'
  );
}

export enum EbaltsInstruction {
  CreateConfig,
  SetAuthority,
  SetGatingProgram,
  ForfeitFreezeAuthority,
  Thaw,
  Freeze,
  ThawPermissionless,
  FreezePermissionless,
  TogglePermissionlessInstructions,
}

export function identifyEbaltsInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): EbaltsInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return EbaltsInstruction.CreateConfig;
  }
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return EbaltsInstruction.SetAuthority;
  }
  if (containsBytes(data, getU8Encoder().encode(2), 0)) {
    return EbaltsInstruction.SetGatingProgram;
  }
  if (containsBytes(data, getU8Encoder().encode(3), 0)) {
    return EbaltsInstruction.ForfeitFreezeAuthority;
  }
  if (containsBytes(data, getU8Encoder().encode(4), 0)) {
    return EbaltsInstruction.Thaw;
  }
  if (containsBytes(data, getU8Encoder().encode(5), 0)) {
    return EbaltsInstruction.Freeze;
  }
  if (containsBytes(data, getU8Encoder().encode(6), 0)) {
    return EbaltsInstruction.ThawPermissionless;
  }
  if (containsBytes(data, getU8Encoder().encode(7), 0)) {
    return EbaltsInstruction.FreezePermissionless;
  }
  if (containsBytes(data, getU8Encoder().encode(8), 0)) {
    return EbaltsInstruction.TogglePermissionlessInstructions;
  }
  throw new Error(
    'The provided instruction could not be identified as a ebalts instruction.'
  );
}

export type ParsedEbaltsInstruction<
  TProgram extends string = 'Eba1ts11111111111111111111111111111111111111',
> =
  | ({
      instructionType: EbaltsInstruction.CreateConfig;
    } & ParsedCreateConfigInstruction<TProgram>)
  | ({
      instructionType: EbaltsInstruction.SetAuthority;
    } & ParsedSetAuthorityInstruction<TProgram>)
  | ({
      instructionType: EbaltsInstruction.SetGatingProgram;
    } & ParsedSetGatingProgramInstruction<TProgram>)
  | ({
      instructionType: EbaltsInstruction.ForfeitFreezeAuthority;
    } & ParsedForfeitFreezeAuthorityInstruction<TProgram>)
  | ({
      instructionType: EbaltsInstruction.Thaw;
    } & ParsedThawInstruction<TProgram>)
  | ({
      instructionType: EbaltsInstruction.Freeze;
    } & ParsedFreezeInstruction<TProgram>)
  | ({
      instructionType: EbaltsInstruction.ThawPermissionless;
    } & ParsedThawPermissionlessInstruction<TProgram>)
  | ({
      instructionType: EbaltsInstruction.FreezePermissionless;
    } & ParsedFreezePermissionlessInstruction<TProgram>)
  | ({
      instructionType: EbaltsInstruction.TogglePermissionlessInstructions;
    } & ParsedTogglePermissionlessInstructionsInstruction<TProgram>);
